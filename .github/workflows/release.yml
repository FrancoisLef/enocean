name: 🚀 GitHub release

on:
  push:
    branches: [main]

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node_version: [lts/-1, lts/*, latest]
      fail-fast: false
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: npm
      - name: 📦 Install dependencies
        run: npm install
      - name: 🧪 Run tests
        run: npm run test
      - name: 🔍 Run linting
        run: npm run lint

  build:
    name: 🏗️ Build package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
      - name: 📦 Install dependencies
        run: npm install
      - name: 🏗️ Build package
        run: npm run build
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  binaries:
    name: 🛠️ Build binaries
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
      - name: 📦 Install dependencies
        run: npm install
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: 🔨 Build binaries
        run: npm run binary
      - name: 📤 Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: binaries/

  release:
    name: 🏷️ Release
    runs-on: ubuntu-latest
    needs: [test, build, binaries]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: 👀 Check version
        id: version-check
        run: |
          package_version=$(node -p "require('./package.json').version")
          exists=$(gh api repos/${{ github.repository }}/releases/tags/v$package_version >/dev/null 2>&1 && echo "true" || echo "")

          if [ -n "$exists" ];
          then
            echo "Version v$package_version already exists"
            echo "::warning file=package.json,line=1::Version v$package_version already exists - no release will be created. If you want to create a new release, please update the version in package.json and push again."
            echo "skipped=true" >> $GITHUB_OUTPUT
          else
            echo "Version v$package_version does not exist. Creating release..."
            echo "skipped=false" >> $GITHUB_OUTPUT
            echo "tag=v$package_version" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: ⚙️ Setup git
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        run: |
          git config --global user.email ${{ secrets.GH_EMAIL }}
          git config --global user.name ${{ secrets.GH_USERNAME }}
      - name: 📥 Download binary artifacts
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: binaries/
      - name: 🏷️ Create Github Release
        uses: ncipollo/release-action@v1.18.0
        if: ${{ steps.version-check.outputs.skipped == 'false' }}
        with:
          name: ${{ steps.version-check.outputs.tag }}
          tag: ${{ steps.version-check.outputs.tag }}
          commit: ${{ github.ref_name }}
          token: ${{ secrets.GH_TOKEN }}
          skipIfReleaseExists: true
          artifacts: 'binaries/*'
          artifactContentType: application/octet-stream

  publish:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    needs: [release, build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: 📦 Publish package to NPM
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
